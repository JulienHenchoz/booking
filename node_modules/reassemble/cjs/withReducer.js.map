{"version":3,"sources":["withReducer.ts"],"names":[],"mappings":";;;;;;;;;AAAA,yCAAuE;AAEvE,qDAAgD;AAkBhD,qBACE,SAAqB,EACrB,cAA0B,EAC1B,OAAsC,EACtC,YAAyD;IAEzD,MAAM,CAAC;QACL,iBAAiB,EAAE;YACjB,IAAI,MAAW,CAAC;YAChB,IAAI,IAAS,CAAC;YACd,IAAI,UAAe,CAAC;YACpB,IAAI,QAAa,CAAC;YAClB,MAAM,CAAC;gBACL,yBAAa,CAAC,UAAC,SAAS,EAAE,KAAK;oBAC7B,IAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,sBAAY,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;oBACjF,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC;oBAC1B,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;oBACrB,UAAU,GAAG,UAAC,MAAW,EAAE,QAAa,IAAK,OAAA,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,QAAQ,CAAC,EAA3C,CAA2C,CAAC;gBAC3F,CAAC,CAAC;gBACF,yBAAa,CAAC,UAAC,KAAK,EAAE,KAAK;oBACzB,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;oBACvB,MAAM,cACD,KAAK,eACP,SAAmB,IAAG,QAAQ,KAC9B,cAAwB,IAAG,UAAU,OACtC;;gBACJ,CAAC,CAAC;aACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AA9BD,kCA8BC;;AAED,kBAAe,WAAW,CAAC","file":"withReducer.js","sourcesContent":["import { Composable, stateCallback, propsCallback } from \"./blueprint\";\nimport { Mapper } from \"./types\";\nimport resolveValue from \"./utils/resolveValue\";\n\nexport type Reducer<TState, TAction> = (s: TState, a: TAction) => TState;\n\nexport function withReducer(\n  stateName: string | symbol,\n  dispatcherName: string | symbol,\n  reducer: Reducer<any, any>,\n  initialValue: Object | Mapper<any, any>,\n): Composable;\n\nexport function withReducer<TPropsIn, TPropNames extends string | symbol, TPropsValue, TAction>(\n  stateName: TPropNames,\n  dispatcherName: TPropNames,\n  reducer: Reducer<TPropsValue, TAction>,\n  initialValue: TPropsValue | Mapper<TPropsIn, TPropsValue>,\n): Composable;\n\nexport function withReducer<TPropsIn, TPropNames extends string | symbol, TPropsValue, TAction>(\n  stateName: TPropNames,\n  dispatcherName: TPropNames,\n  reducer: Reducer<TPropsValue, TAction>,\n  initialValue: TPropsValue | Mapper<TPropsIn, TPropsValue>,\n): Composable {\n  return {\n    instanceCallbacks: () => {\n      let update: any;\n      let name: any;\n      let dispatcher: any;\n      let curState: any;\n      return [\n        stateCallback((initState, props) => {\n          const newState = initState(String(stateName), resolveValue(initialValue, props));\n          update = newState.updater;\n          name = newState.name;\n          dispatcher = (action: any, callback: any) => update(reducer(curState, action), callback);\n        }),\n        propsCallback((props, state) => {\n          curState = state[name];\n          return {\n            ...props,\n            [stateName as string]: curState,\n            [dispatcherName as string]: dispatcher,\n          };\n        }),\n      ];\n    },\n  };\n}\n\nexport default withReducer;\n"]}