import { Composable } from "./blueprint";
import { Mapper } from "./types";
export declare type Reducer<TState, TAction> = (s: TState, a: TAction) => TState;
export declare function withReducer(stateName: string | symbol, dispatcherName: string | symbol, reducer: Reducer<any, any>, initialValue: Object | Mapper<any, any>): Composable;
export declare function withReducer<TPropsIn, TPropNames extends string | symbol, TPropsValue, TAction>(stateName: TPropNames, dispatcherName: TPropNames, reducer: Reducer<TPropsValue, TAction>, initialValue: TPropsValue | Mapper<TPropsIn, TPropsValue>): Composable;
export default withReducer;
