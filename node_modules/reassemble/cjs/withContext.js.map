{"version":3,"sources":["withContext.ts"],"names":[],"mappings":";;;;;;;;;AAAA,yCAA+D;AAY/D,qBACE,iBAA8C,EAC9C,eAAqC;IAErC,MAAM,CAAC;QACL,cAAc,EAAE,UAAC,cAAc;YAC7B,cAAc,CAAC,iBAAiB,gBAC3B,cAAc,CAAC,iBAAiB,EAC/B,iBAAyB,CAC9B,CAAC;QACJ,CAAC;QACD,iBAAiB,EAAE;YACjB,gCAAoB,CAAC,UAAC,YAAY,EAAE,KAAK,IAAK,OAAA,cACzC,YAAY,EACZ,eAAe,CAAC,KAAK,CAAQ,EAChC,EAH4C,CAG5C,CAAC;SACJ;KACF,CAAC;AACJ,CAAC;AAlBD,kCAkBC;;AAED,kBAAe,WAAW,CAAC","file":"withContext.js","sourcesContent":["import { Composable, childContextCallback } from \"./blueprint\";\n\nexport function withContext<TOut>(\n  childContextTypes: {[key in keyof TOut]: any },\n  getChildContext: (props: any) => TOut,\n): Composable;\n\nexport function withContext<TIn, TOut>(\n  childContextTypes: {[key in keyof TOut]: any },\n  getChildContext: (props: TIn) => TOut,\n): Composable;\n\nexport function withContext<TIn, TOut>(\n  childContextTypes: {[key in keyof TOut]: any },\n  getChildContext: (props: TIn) => TOut,\n): Composable {\n  return {\n    staticCallback: (componentClass) => {\n      componentClass.childContextTypes = {\n        ...componentClass.childContextTypes,\n        ...(childContextTypes as any),\n      };\n    },\n    instanceCallbacks: [\n      childContextCallback((childContext, props) => ({\n        ...childContext,\n        ...getChildContext(props) as any,\n      })),\n    ],\n  };\n}\n\nexport default withContext;\n"]}