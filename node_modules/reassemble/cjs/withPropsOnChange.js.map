{"version":3,"sources":["withPropsOnChange.ts"],"names":[],"mappings":";;;;;;;;;AAAA,yCAAwD;AAExD,qCAAgC;AAChC,qDAAgD;AAYhD,2BACE,eAAgE,EAChE,WAAwC;IAExC,IAAM,SAAS,GAAG,OAAO,eAAe,KAAK,UAAU;UACnD,eAAe;UACf,UAAC,KAAe,EAAE,SAAmB,IAAK,OAAA,CAAC,sBAAY,CACvD,cAAI,gBAAC,KAAK,SAAK,eAAe,IAC9B,cAAI,gBAAC,SAAS,SAAK,eAAe,GACnC,EAH2C,CAG3C,CAAC;IACJ,MAAM,CAAC;QACL,iBAAiB,EAAE;YACjB,IAAI,aAAkB,CAAC;YACvB,IAAI,aAAkB,CAAC;YACvB,MAAM,CAAC;gBACL,yBAAa,CAAC,UAAC,KAAK;oBAClB,EAAE,CAAC,CAAC,aAAa,KAAK,SAAS,IAAI,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;wBACnE,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;oBACrC,CAAC;oBACD,aAAa,GAAG,KAAK,CAAC;oBACtB,MAAM,cAAM,KAAK,EAAK,aAAa,EAAG;gBACxC,CAAC,CAAC;aACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAzBD,8CAyBC;;AAED,kBAAe,iBAAiB,CAAC","file":"withPropsOnChange.js","sourcesContent":["import { Composable, propsCallback } from \"./blueprint\";\nimport { PredicateDiff, Mapper } from \"./types\";\nimport pick from \"./utils/pick\";\nimport shallowEqual from \"./utils/shallowEqual\";\n\nexport function withPropsOnChange(\n  shouldMapOrKeys: string[] | PredicateDiff<any>,\n  propsMapper: Mapper<any, any>,\n): Composable;\n\nexport function withPropsOnChange<TPropsIn, TPropsOut>(\n  shouldMapOrKeys: Array<keyof TPropsIn> | PredicateDiff<TPropsIn>,\n  propsMapper: Mapper<TPropsIn, TPropsOut>,\n): Composable;\n\nexport function withPropsOnChange<TPropsIn, TPropsOut>(\n  shouldMapOrKeys: Array<keyof TPropsIn> | PredicateDiff<TPropsIn>,\n  propsMapper: Mapper<TPropsIn, TPropsOut>,\n): Composable {\n  const shouldMap = typeof shouldMapOrKeys === \"function\"\n    ? shouldMapOrKeys\n    : (props: TPropsIn, nextProps: TPropsIn) => !shallowEqual(\n      pick(props, ...shouldMapOrKeys),\n      pick(nextProps, ...shouldMapOrKeys),\n    );\n  return {\n    instanceCallbacks: () => {\n      let previousProps: any;\n      let computedProps: any;\n      return [\n        propsCallback((props) => {\n          if (previousProps === undefined || shouldMap(previousProps, props)) {\n            computedProps = propsMapper(props);\n          }\n          previousProps = props;\n          return { ...props, ...computedProps };\n        }),\n      ];\n    },\n  };\n}\n\nexport default withPropsOnChange;\n"]}