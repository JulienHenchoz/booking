"use strict";
var combine_1 = require("./combine");
var resolveValue_1 = require("./utils/resolveValue");
exports.lazyLoadCallback = function (callback) { return ({ kind: "lazyLoadCallback", callback: callback }); };
exports.propsCallback = function (callback) { return ({ kind: "propsCallback", callback: callback }); };
exports.stateCallback = function (callback) { return ({ kind: "stateCallback", callback: callback }); };
exports.childContextCallback = function (callback) { return ({ kind: "childContextCallback", callback: callback }); };
exports.skipCallback = function (callback) { return ({ kind: "skipCallback", callback: callback }); };
exports.renderCallback = function (callback) { return ({ kind: "renderCallback", callback: callback }); };
exports.componentWillMountCallback = function (callback) { return ({ kind: "componentWillMountCallback", callback: callback }); };
exports.componentDidMountCallback = function (callback) { return ({ kind: "componentDidMountCallback", callback: callback }); };
exports.componentWillUnmountCallback = function (callback) { return ({ kind: "componentWillUnmountCallback", callback: callback }); };
exports.componentWillReceivePropsCallback = function (callback) { return ({ kind: "componentWillReceivePropsCallback", callback: callback }); };
exports.shouldComponentUpdateCallback = function (callback) { return ({ kind: "shouldComponentUpdateCallback", callback: callback }); };
exports.componentWillUpdateCallback = function (callback) { return ({ kind: "componentWillUpdateCallback", callback: callback }); };
exports.componentDidUpdateCallback = function (callback) { return ({ kind: "componentDidUpdateCallback", callback: callback }); };
function createBlueprint() {
    var composables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        composables[_i] = arguments[_i];
    }
    var componentCallbacks = combine_1.default.apply(void 0, composables);
    return {
        staticCallbacks: componentCallbacks.filter(function (c) { return c.staticCallback; }).map(function (c) { return c.staticCallback; }),
        instanceCallbacks: function () {
            var result = [];
            componentCallbacks.forEach(function (c) {
                if (!c.instanceCallbacks) {
                    return;
                }
                var instanceCallbacks = resolveValue_1.default(c.instanceCallbacks);
                if (!instanceCallbacks) {
                    return;
                }
                result.push.apply(result, instanceCallbacks);
            });
            return result;
        },
    };
}
exports.createBlueprint = createBlueprint;

//# sourceMappingURL=blueprint.js.map
