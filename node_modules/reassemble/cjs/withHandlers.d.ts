import { Composable } from "./blueprint";
import { Mapper } from "./types";
export declare type EventHandler = Function;
export declare type AnyHandleCreators = {
    [key: string]: Mapper<any, any>;
};
export declare type HandleCreators<TPropsIn, TPropsOut> = {
    [P in keyof TPropsOut]: Mapper<TPropsIn, TPropsOut[P]>;
};
export declare function withHandlers(handlerCreators: AnyHandleCreators | ((props: any) => AnyHandleCreators)): Composable;
export declare function withHandlers<TPropsIn, TPropsOut>(handlerCreators: HandleCreators<TPropsIn, TPropsOut> | ((props: TPropsIn) => HandleCreators<TPropsIn, TPropsOut>)): Composable;
export default withHandlers;
