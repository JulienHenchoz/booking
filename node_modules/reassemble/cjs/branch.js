/* tslint:disable: no-bitwise */
"use strict";
var blueprint_1 = require("./blueprint");
var resolveValue_1 = require("./utils/resolveValue");
var toArray_1 = require("./utils/toArray");
var resolveCallbacks = function (list) { return list.reduce(function (result, c) {
    result.push.apply(result, resolveValue_1.default(c.instanceCallbacks));
    return result;
}, []); };
function branch(test, left, right) {
    if (right === void 0) { right = []; }
    var leftList = toArray_1.default(left);
    var rightList = toArray_1.default(right);
    return {
        instanceCallbacks: function () {
            var loaded = { left: false, right: false };
            var isTrue;
            return [
                blueprint_1.lazyLoadCallback(function (props) {
                    isTrue = test(props);
                    if (!loaded.left && isTrue) {
                        loaded.left = true;
                        var newCallbacks = resolveCallbacks(leftList);
                        var skip_1 = newCallbacks.length;
                        newCallbacks.unshift(blueprint_1.skipCallback(function () { return isTrue ? 0 : skip_1; }));
                        return newCallbacks;
                    }
                    if (!loaded.right && !isTrue) {
                        loaded.right = true;
                        var newCallbacks = resolveCallbacks(rightList);
                        var skip_2 = newCallbacks.length;
                        newCallbacks.unshift(blueprint_1.skipCallback(function () { return isTrue ? skip_2 : 0; }));
                        return newCallbacks;
                    }
                    return null;
                }),
            ];
        },
    };
}
exports.branch = branch;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = branch;

//# sourceMappingURL=branch.js.map
