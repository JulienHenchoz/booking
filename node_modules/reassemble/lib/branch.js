/* tslint:disable: no-bitwise */
import { lazyLoadCallback, skipCallback } from "./blueprint";
import resolveValue from "./utils/resolveValue";
import toArray from "./utils/toArray";
var resolveCallbacks = function (list) { return list.reduce(function (result, c) {
    result.push.apply(result, resolveValue(c.instanceCallbacks));
    return result;
}, []); };
export function branch(test, left, right) {
    if (right === void 0) { right = []; }
    var leftList = toArray(left);
    var rightList = toArray(right);
    return {
        instanceCallbacks: function () {
            var loaded = { left: false, right: false };
            var isTrue;
            return [
                lazyLoadCallback(function (props) {
                    isTrue = test(props);
                    if (!loaded.left && isTrue) {
                        loaded.left = true;
                        var newCallbacks = resolveCallbacks(leftList);
                        var skip_1 = newCallbacks.length;
                        newCallbacks.unshift(skipCallback(function () { return isTrue ? 0 : skip_1; }));
                        return newCallbacks;
                    }
                    if (!loaded.right && !isTrue) {
                        loaded.right = true;
                        var newCallbacks = resolveCallbacks(rightList);
                        var skip_2 = newCallbacks.length;
                        newCallbacks.unshift(skipCallback(function () { return isTrue ? skip_2 : 0; }));
                        return newCallbacks;
                    }
                    return null;
                }),
            ];
        },
    };
}
export default branch;

//# sourceMappingURL=branch.js.map
