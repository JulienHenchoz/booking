var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { propsCallback } from "./blueprint";
import pick from "./utils/pick";
export function integrate() {
    var propNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        propNames[_i] = arguments[_i];
    }
    return {
        instanceCallbacks: [
            propsCallback(function (props) {
                return __assign({}, props, { __isolation: props.__isolation.slice(0, props.__isolation.length - 2).concat([
                        __assign({}, props.__isolation[props.__isolation.length - 1], pick.apply(void 0, [props].concat(propNames))),
                    ]) });
            }),
        ],
    };
}
export default integrate;

//# sourceMappingURL=integrate.js.map
