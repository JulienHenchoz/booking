var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { propsCallback } from "./blueprint";
import pick from "./utils/pick";
export function getContext(contextTypes) {
    return {
        staticCallback: function (componentClass) {
            componentClass.contextTypes = __assign({}, componentClass.contextTypes, contextTypes);
        },
        instanceCallbacks: [
            propsCallback(function (props, _, context) { return (__assign({}, props, pick.apply(void 0, [context].concat(Object.keys(contextTypes))))); }),
        ],
    };
}
export default getContext;

//# sourceMappingURL=getContext.js.map
