{"version":3,"sources":["branch.ts"],"names":[],"mappings":"AAAA,gCAAgC;AAEhC,OAAO,EAAwD,gBAAgB,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAEnH,OAAO,YAAY,MAAM,sBAAsB,CAAC;AAChD,OAAO,OAAO,MAAM,iBAAiB,CAAC;AAEtC,IAAM,gBAAgB,GAAG,UAAC,IAA0B,IAAK,OAAA,IAAI,CAAC,MAAM,CAClE,UAAC,MAAM,EAAE,CAAC;IACR,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,YAAY,CAAC,CAAC,CAAC,iBAAiB,CAAC,EAAE;IAClD,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC,EAAE,EAAE,CAAC,EAJiD,CAIjD,CAAC;AAcT,MAAM,iBACJ,IAAkB,EAClB,IAAgB,EAChB,KAAsB;IAAtB,sBAAA,EAAA,UAAsB;IAEtB,IAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,IAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,CAAC;QACL,iBAAiB,EAAE;YACjB,IAAM,MAAM,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YAC7C,IAAI,MAAe,CAAC;YACpB,MAAM,CAAC;gBACL,gBAAgB,CAAC,UAAC,KAAK;oBACrB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;wBAC3B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;wBACnB,IAAM,YAAY,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;wBAChD,IAAM,MAAI,GAAG,YAAY,CAAC,MAAM,CAAC;wBACjC,YAAY,CAAC,OAAO,CAClB,YAAY,CAAC,cAAM,OAAA,MAAM,GAAG,CAAC,GAAG,MAAI,EAAjB,CAAiB,CAAC,CACtC,CAAC;wBACF,MAAM,CAAC,YAAY,CAAC;oBACtB,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC7B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;wBACpB,IAAM,YAAY,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;wBACjD,IAAM,MAAI,GAAG,YAAY,CAAC,MAAM,CAAC;wBACjC,YAAY,CAAC,OAAO,CAClB,YAAY,CAAC,cAAM,OAAA,MAAM,GAAG,MAAI,GAAG,CAAC,EAAjB,CAAiB,CAAC,CACtC,CAAC;wBACF,MAAM,CAAC,YAAY,CAAC;oBACtB,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC;gBACd,CAAC,CAAC;aACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAED,eAAe,MAAM,CAAC","file":"branch.js","sourcesContent":["/* tslint:disable: no-bitwise */\n\nimport { Composable, ComponentCallbacks, InstanceCallbackList, lazyLoadCallback, skipCallback } from \"./blueprint\";\nimport { Predicate } from \"./types\";\nimport resolveValue from \"./utils/resolveValue\";\nimport toArray from \"./utils/toArray\";\n\nconst resolveCallbacks = (list: ComponentCallbacks[]) => list.reduce<InstanceCallbackList>(\n  (result, c) => {\n    result.push(...resolveValue(c.instanceCallbacks));\n    return result;\n  }, []);\n\nexport function branch(\n  test: Predicate<any>,\n  left: Composable,\n  right?: Composable,\n): Composable;\n\nexport function branch<T>(\n  test: Predicate<T>,\n  left: Composable,\n  right?: Composable,\n): Composable;\n\nexport function branch<T>(\n  test: Predicate<T>,\n  left: Composable,\n  right: Composable = [],\n): Composable {\n  const leftList = toArray(left);\n  const rightList = toArray(right);\n  return {\n    instanceCallbacks: () => {\n      const loaded = { left: false, right: false };\n      let isTrue: boolean;\n      return [\n        lazyLoadCallback((props) => {\n          isTrue = test(props);\n          if (!loaded.left && isTrue) {\n            loaded.left = true;\n            const newCallbacks = resolveCallbacks(leftList);\n            const skip = newCallbacks.length;\n            newCallbacks.unshift(\n              skipCallback(() => isTrue ? 0 : skip),\n            );\n            return newCallbacks;\n          }\n          if (!loaded.right && !isTrue) {\n            loaded.right = true;\n            const newCallbacks = resolveCallbacks(rightList);\n            const skip = newCallbacks.length;\n            newCallbacks.unshift(\n              skipCallback(() => isTrue ? skip : 0),\n            );\n            return newCallbacks;\n          }\n          return null;\n        }),\n      ];\n    },\n  };\n}\n\nexport default branch;\n"]}