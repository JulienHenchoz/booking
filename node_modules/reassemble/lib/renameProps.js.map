{"version":3,"sources":["renameProps.ts"],"names":[],"mappings":";;;;;;;;AACA,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,IAAI,MAAM,cAAc,CAAC;AAChC,OAAO,IAAI,MAAM,cAAc,CAAC;AAChC,OAAO,OAAO,MAAM,iBAAiB,CAAC;AACtC,OAAO,iBAAiB,MAAM,2BAA2B,CAAC;AAU1D,MAAM,sBACJ,OAAoC;IAEpC,IAAM,cAAc,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAClD,MAAM,CAAC,QAAQ,CAAC,UAAC,KAAK,IAAK,OAAA,cACtB,IAAI,gBAAC,KAAK,SAAK,cAAc,IAC7B,OAAO,CACR,IAAI,gBAAC,KAAK,SAAK,cAAc,IAC7B,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,EAAhB,CAAgB,CAC9B,EACD,EANyB,CAMzB,CAAC,CAAC;AACN,CAAC;AAED,eAAe,WAAW,CAAC","file":"renameProps.js","sourcesContent":["import { Composable } from \"./blueprint\";\nimport mapProps from \"./mapProps\";\nimport omit from \"./utils/omit\";\nimport pick from \"./utils/pick\";\nimport mapKeys from \"./utils/mapKeys\";\nimport getKeysAndSymbols from \"./utils/getKeysAndSymbols\";\n\nexport function renameProps<TKeysIn extends string, TKeysOut extends string>(\n  nameMap: {[P in TKeysIn]?: TKeysOut},\n): Composable;\n\nexport function renameProps(\n  nameMap: { [key: string]: string | symbol },\n): Composable;\n\nexport function renameProps<TKeysIn extends string, TKeysOut extends string>(\n  nameMap: {[P in TKeysIn]?: TKeysOut},\n) {\n  const keysAndSymbols = getKeysAndSymbols(nameMap);\n  return mapProps((props) => ({\n    ...omit(props, ...keysAndSymbols),\n    ...mapKeys(\n      pick(props, ...keysAndSymbols),\n      (oldName) => nameMap[oldName],\n    ),\n  }));\n}\n\nexport default renameProps;\n"]}