var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { stateCallback, propsCallback } from "./blueprint";
import resolveValue from "./utils/resolveValue";
export function withReducer(stateName, dispatcherName, reducer, initialValue) {
    return {
        instanceCallbacks: function () {
            var update;
            var name;
            var dispatcher;
            var curState;
            return [
                stateCallback(function (initState, props) {
                    var newState = initState(String(stateName), resolveValue(initialValue, props));
                    update = newState.updater;
                    name = newState.name;
                    dispatcher = function (action, callback) { return update(reducer(curState, action), callback); };
                }),
                propsCallback(function (props, state) {
                    curState = state[name];
                    return __assign({}, props, (_a = {}, _a[stateName] = curState, _a[dispatcherName] = dispatcher, _a));
                    var _a;
                }),
            ];
        },
    };
}
export default withReducer;

//# sourceMappingURL=withReducer.js.map
