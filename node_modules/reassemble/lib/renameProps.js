var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import mapProps from "./mapProps";
import omit from "./utils/omit";
import pick from "./utils/pick";
import mapKeys from "./utils/mapKeys";
import getKeysAndSymbols from "./utils/getKeysAndSymbols";
export function renameProps(nameMap) {
    var keysAndSymbols = getKeysAndSymbols(nameMap);
    return mapProps(function (props) { return (__assign({}, omit.apply(void 0, [props].concat(keysAndSymbols)), mapKeys(pick.apply(void 0, [props].concat(keysAndSymbols)), function (oldName) { return nameMap[oldName]; }))); });
}
export default renameProps;

//# sourceMappingURL=renameProps.js.map
