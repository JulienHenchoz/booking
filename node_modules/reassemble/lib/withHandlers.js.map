{"version":3,"sources":["withHandlers.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,EAAc,aAAa,EAAE,MAAM,aAAa,CAAC;AAExD,OAAO,YAAY,MAAM,sBAAsB,CAAC;AAChD,OAAO,iBAAiB,MAAM,2BAA2B,CAAC;AAkB1D,MAAM,uBACJ,eAAiH;IAEjH,MAAM,CAAC;QACL,iBAAiB,EAAE;YACjB,IAAI,QAAa,CAAC;YAClB,IAAI,YAAiB,CAAC;YACtB,MAAM,CAAC;gBACL,aAAa,CAAC,UAAC,KAAK;oBAClB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACd,QAAQ,GAAG,EAAE,CAAC;wBACd,IAAM,kBAAgB,GAAQ,YAAY,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;wBACnE,iBAAiB,CAAC,kBAAgB,CAAC,CAAC,OAAO,CACzC,UAAC,IAAI,IAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,GAAG;4BAAC,cAAc;iCAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gCAAd,yBAAc;;4BAAK,OAAA,kBAAgB,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,eAAI,IAAI;wBAA5C,CAA6C,EAAlF,CAAkF,CAC7F,CAAC;oBACJ,CAAC;oBACD,YAAY,GAAG,KAAK,CAAC;oBACrB,MAAM,cACD,KAAK,EACL,QAAQ,EACX;gBACJ,CAAC,CAAC;aACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC;AAED,eAAe,YAAY,CAAC","file":"withHandlers.js","sourcesContent":["import { Composable, propsCallback } from \"./blueprint\";\nimport { Mapper } from \"./types\";\nimport resolveValue from \"./utils/resolveValue\";\nimport getKeysAndSymbols from \"./utils/getKeysAndSymbols\";\n\nexport type EventHandler = Function;\nexport type AnyHandleCreators = {\n  [key: string]: Mapper<any, any>;\n};\nexport type HandleCreators<TPropsIn, TPropsOut> = {\n[P in keyof TPropsOut]: Mapper<TPropsIn, TPropsOut[P]>;\n};\n\nexport function withHandlers(\n  handlerCreators: AnyHandleCreators | ((props: any) => AnyHandleCreators),\n): Composable;\n\nexport function withHandlers<TPropsIn, TPropsOut>(\n  handlerCreators: HandleCreators<TPropsIn, TPropsOut> | ((props: TPropsIn) => HandleCreators<TPropsIn, TPropsOut>),\n): Composable;\n\nexport function withHandlers<TPropsIn, TPropsOut>(\n  handlerCreators: HandleCreators<TPropsIn, TPropsOut> | ((props: TPropsIn) => HandleCreators<TPropsIn, TPropsOut>),\n): Composable {\n  return {\n    instanceCallbacks: () => {\n      let handlers: any;\n      let handlerProps: any;\n      return [\n        propsCallback((props) => {\n          if (!handlers) {\n            handlers = {};\n            const resolvedHandlers: any = resolveValue(handlerCreators, props);\n            getKeysAndSymbols(resolvedHandlers).forEach(\n              (name) => handlers[name] = (...args: any[]) => resolvedHandlers[name](handlerProps)(...args),\n            );\n          }\n          handlerProps = props;\n          return {\n            ...props,\n            ...handlers,\n          };\n        }),\n      ];\n    },\n  };\n}\n\nexport default withHandlers;\n"]}