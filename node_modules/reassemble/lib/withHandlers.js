var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { propsCallback } from "./blueprint";
import resolveValue from "./utils/resolveValue";
import getKeysAndSymbols from "./utils/getKeysAndSymbols";
export function withHandlers(handlerCreators) {
    return {
        instanceCallbacks: function () {
            var handlers;
            var handlerProps;
            return [
                propsCallback(function (props) {
                    if (!handlers) {
                        handlers = {};
                        var resolvedHandlers_1 = resolveValue(handlerCreators, props);
                        getKeysAndSymbols(resolvedHandlers_1).forEach(function (name) { return handlers[name] = function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            return resolvedHandlers_1[name](handlerProps).apply(void 0, args);
                        }; });
                    }
                    handlerProps = props;
                    return __assign({}, props, handlers);
                }),
            ];
        },
    };
}
export default withHandlers;

//# sourceMappingURL=withHandlers.js.map
