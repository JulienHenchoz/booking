{"version":3,"sources":["blueprint.ts"],"names":[],"mappings":"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","file":"blueprint.js","sourcesContent":["import { ComponentClass } from \"react\";\n\nimport { ReactComponent, ReactAnyComponent } from \"./types\";\nimport combine from \"./combine\";\nimport resolveValue from \"./utils/resolveValue\";\n\nexport type StateUpdater<T> = (newState: T, callback?: () => void) => void;\n\nexport type StaticCallback = (componentClass: ComponentClass<any>, target: ReactComponent<any> | string) => void;\n\nexport type LifeCycleCallbackTypes = {\n  componentWillMountCallback?: (props: any, state: any, context: any) => () => void;\n  componentDidMountCallback?: (props: any, state: any, context: any) => () => void;\n  componentWillUnmountCallback?: (props: any, state: any, context: any) => () => void;\n  componentWillReceivePropsCallback?: (props: any, state: any, context: any) => () => void;\n  shouldComponentUpdateCallback?: (props: any, state: any, context: any) => () => boolean;\n  componentWillUpdateCallback?: (props: any, state: any, context: any) => () => void;\n  componentDidUpdateCallback?: (props: any, state: any, context: any) => () => void;\n};\n\nexport type InstanceCallbackTypes = LifeCycleCallbackTypes & {\n  lazyLoadCallback?: (props: any, state: any, context: any) => InstanceCallbackList;\n  propsCallback?: (props: any, state: any, context: any) => any;\n  childContextCallback?: (childContext: any, props: any, state: any, context: any) => any;\n  stateCallback?: (\n    initState: (name: string, value: any) => { name: string, updater: StateUpdater<any> },\n    props: any, state: any, context: any,\n  ) => void;\n  skipCallback?: (props: any, state: any, context: any) => number;\n  renderCallback?: (component: ReactAnyComponent, props: any, state: any, context: any) => ReactAnyComponent;\n};\n\nexport type InstanceCallbackEntry<T extends keyof InstanceCallbackTypes> = {\n  kind: T,\n  callback: InstanceCallbackTypes[T],\n};\n\n/*\n * TODO(cvle): Bug: using the typesafe version does not work.\n * Log: Return type of exported function has or is using name 'InstanceCallbackEntry'\n * from external module \"./src/blueprint\" but cannot be named.\n */\nexport type InstanceCallbackList =\n  Array<InstanceCallbackEntry<any>>;\n\nexport type InstanceCallbackListTypesafe =\n  Array<InstanceCallbackEntry<\"lazyLoadCallback\">\n  | InstanceCallbackEntry<\"propsCallback\">\n  | InstanceCallbackEntry<\"stateCallback\">\n  | InstanceCallbackEntry<\"childContextCallback\">\n  | InstanceCallbackEntry<\"skipCallback\">\n  | InstanceCallbackEntry<\"renderCallback\">\n  | InstanceCallbackEntry<\"componentWillMountCallback\">\n  | InstanceCallbackEntry<\"componentDidMountCallback\">\n  | InstanceCallbackEntry<\"componentWillUnmountCallback\">\n  | InstanceCallbackEntry<\"componentWillReceivePropsCallback\">\n  | InstanceCallbackEntry<\"shouldComponentUpdateCallback\">\n  | InstanceCallbackEntry<\"componentWillUpdateCallback\">\n  | InstanceCallbackEntry<\"componentDidUpdateCallback\">>;\n\nexport type ComponentCallbacks = {\n  staticCallback?: StaticCallback;\n  instanceCallbacks?: (() => InstanceCallbackList) | InstanceCallbackList;\n};\n\nexport type Composable = ComponentCallbacks | ComponentCallbacks[];\n\nexport type CallbackEntryHelper<T extends keyof InstanceCallbackTypes> =\n  (callback: InstanceCallbackTypes[T]) => InstanceCallbackEntry<T>;\n\nexport const lazyLoadCallback: CallbackEntryHelper<\"lazyLoadCallback\"> =\n  (callback) => ({ kind: \"lazyLoadCallback\", callback });\n\nexport const propsCallback: CallbackEntryHelper<\"propsCallback\"> =\n  (callback) => ({ kind: \"propsCallback\", callback });\n\nexport const stateCallback: CallbackEntryHelper<\"stateCallback\"> =\n  (callback) => ({ kind: \"stateCallback\", callback });\n\nexport const childContextCallback: CallbackEntryHelper<\"childContextCallback\"> =\n  (callback) => ({ kind: \"childContextCallback\", callback });\n\nexport const skipCallback: CallbackEntryHelper<\"skipCallback\"> =\n  (callback) => ({ kind: \"skipCallback\", callback });\n\nexport const renderCallback: CallbackEntryHelper<\"renderCallback\"> =\n  (callback) => ({ kind: \"renderCallback\", callback });\n\nexport const componentWillMountCallback: CallbackEntryHelper<\"componentWillMountCallback\"> =\n  (callback) => ({ kind: \"componentWillMountCallback\", callback });\n\nexport const componentDidMountCallback: CallbackEntryHelper<\"componentDidMountCallback\"> =\n  (callback) => ({ kind: \"componentDidMountCallback\", callback });\n\nexport const componentWillUnmountCallback: CallbackEntryHelper<\"componentWillUnmountCallback\"> =\n  (callback) => ({ kind: \"componentWillUnmountCallback\", callback });\n\nexport const componentWillReceivePropsCallback: CallbackEntryHelper<\"componentWillReceivePropsCallback\"> =\n  (callback) => ({ kind: \"componentWillReceivePropsCallback\", callback });\n\nexport const shouldComponentUpdateCallback: CallbackEntryHelper<\"shouldComponentUpdateCallback\"> =\n  (callback) => ({ kind: \"shouldComponentUpdateCallback\", callback });\n\nexport const componentWillUpdateCallback: CallbackEntryHelper<\"componentWillUpdateCallback\"> =\n  (callback) => ({ kind: \"componentWillUpdateCallback\", callback });\n\nexport const componentDidUpdateCallback: CallbackEntryHelper<\"componentDidUpdateCallback\"> =\n  (callback) => ({ kind: \"componentDidUpdateCallback\", callback });\n\nexport type Blueprint = {\n  staticCallbacks?: StaticCallback[];\n  instanceCallbacks?: () => InstanceCallbackListTypesafe;\n};\n\nexport function createBlueprint(...composables: Composable[]): Blueprint {\n  const componentCallbacks: ComponentCallbacks[] = combine(...composables) as ComponentCallbacks[];\n  return {\n    staticCallbacks: componentCallbacks.filter((c) => c.staticCallback).map((c) => c.staticCallback),\n    instanceCallbacks: () => {\n      const result: InstanceCallbackList = [];\n      componentCallbacks.forEach((c) => {\n        if (!c.instanceCallbacks) { return; }\n        const instanceCallbacks: any = resolveValue(c.instanceCallbacks);\n        if (!instanceCallbacks) { return; }\n        result.push(...instanceCallbacks);\n      });\n      return result;\n    },\n  };\n}\n"]}