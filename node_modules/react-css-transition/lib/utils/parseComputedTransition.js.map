{"version":3,"sources":["utils/parseComputedTransition.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAG5C,MAAM,kCAAkC,QAAa;IACnD,IAAI,YAAY,GAAoB,IAAI,CAAC;IACzC,IAAI,aAAa,GAAoB,IAAI,CAAC;IAC1C,IAAI,yBAAyB,GAAG,CAAC,CAAC,CAAC;IACnC,IAAI,kBAAkB,GAAG,QAAQ,CAAC;IAClC,IAAM,UAAU,GAAG,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAChE,IAAM,MAAM,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACzD,IAAM,SAAS,GAAG,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC/D,UAAU,CAAC,OAAO,CAChB,UAAC,QAAgB,EAAE,CAAS;QAC1B,IAAM,QAAQ,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACvC,IAAM,aAAa,GAAG,QAAQ,GAAG,KAAK,CAAC;QACvC,EAAE,CAAC,CAAC,aAAa,GAAG,yBAAyB,CAAC,CAAC,CAAC;YAC9C,yBAAyB,GAAG,aAAa,CAAC;YAC1C,YAAY,GAAG,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,CAAC;QAC/C,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,GAAG,kBAAkB,CAAC,CAAC,CAAC;YAC/B,kBAAkB,GAAG,KAAK,CAAC;YAC3B,aAAa,GAAG,EAAE,QAAQ,UAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,CAAC;QAChD,CAAC;IACH,CAAC,CACF,CAAC;IACF,MAAM,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AACvC,CAAC;AAED,eAAe,uBAAuB,CAAC","file":"parseComputedTransition.js","sourcesContent":["import parseDuration from \"./parseDuration\";\nimport { TransitionEntry } from \"./parseTransition\";\n\nexport function parseComputedTransition(computed: any): [TransitionEntry, TransitionEntry] {\n  let lastProperty: TransitionEntry = null;\n  let firstProperty: TransitionEntry = null;\n  let lastPropertyTotalDuration = -1;\n  let firstPropertyDelay = 99999999;\n  const properties = computed.transitionProperty.split(/\\s*,\\s*/);\n  const delays = computed.transitionDelay.split(/\\s*,\\s*/);\n  const durations = computed.transitionDuration.split(/\\s*,\\s*/);\n  properties.forEach(\n    (property: string, i: number) => {\n      const duration = parseDuration(durations[i]);\n      const delay = parseDuration(delays[i]);\n      const totalDuration = duration + delay;\n      if (totalDuration > lastPropertyTotalDuration) {\n        lastPropertyTotalDuration = totalDuration;\n        lastProperty = { property, duration, delay };\n      }\n      if (delay < firstPropertyDelay) {\n        firstPropertyDelay = delay;\n        firstProperty = { property, duration, delay };\n      }\n    },\n  );\n  return [firstProperty, lastProperty];\n}\n\nexport default parseComputedTransition;\n"]}