var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from "react";
import { assemble, setDisplayName, omitProps, defaultProps } from "reassemble";
import { reducer } from "./reducer";
import { withTransitionState } from "./composables/withTransitionState";
import { mergeWithBaseStyle } from "./composables/mergeWithBaseStyle";
import { withTransitionInfo } from "./composables/withTransitionInfo";
import { withTimeout } from "./composables/withTimeout";
import { withTransitionObserver } from "./composables/withTransitionObserver";
import { withWorkaround } from "./composables/withWorkaround";
import { withDOMNodeCallback } from "./composables/withDOMNodeCallback";
import { preventPhantomEvents } from "./composables/preventPhantomEvents";
var withDefaultProps = defaultProps({
    component: "div",
});
var mapPropsToInner = omitProps("active", "transitionAppear", "defaultStyle", "activeStyle", "appearStyle", "enterStyle", "leaveStyle", "appearInitStyle", "enterInitStyle", "leaveInitStyle", "defaultClassName", "activeClassName", "appearClassName", "enterClassName", "leaveClassName", "appearInitClassName", "enterInitClassName", "leaveInitClassName", "transitionDelay", "onTransitionComplete", "onTransitionBegin", "transitionInfo", "transitionState", "timeout", "getDOMNode");
var enhance = assemble(setDisplayName("CSSTransition"), withDefaultProps, withDOMNodeCallback, withTransitionState(reducer), mergeWithBaseStyle, withTransitionInfo, withTimeout, withTransitionObserver, withWorkaround, preventPhantomEvents, mapPropsToInner);
export var CSSTransitionInner = function (_a) {
    var Wrapper = _a.component, onDOMNodeRef = _a.onDOMNodeRef, children = _a.children, rest = __rest(_a, ["component", "onDOMNodeRef", "children"]);
    return React.createElement(Wrapper, __assign({ ref: onDOMNodeRef }, rest, { children: children }));
};
export var CSSTransition = enhance(CSSTransitionInner);

//# sourceMappingURL=csstransition.js.map
