{"version":3,"sources":["composables/withTransitionObserver.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAK1C,OAAO,uBAAuB,MAAM,kCAAkC,CAAC;AAevE,MAAM,CAAC,IAAM,sBAAsB,GACjC,YAAY,CAAuB;IACjC,iBAAiB,EAAE,UACjB,EAKC;YAJmB,+CAAa,EACZ,8CAAY,EAC/B,wCAAiB,EACjB,wCAAiB;QAEhB,OAAA,UAAC,CAAuB;YAC3B,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC;YAChD,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,aAAa;gBAC/C,CAAC,uBAAuB,CAAC,CAAC,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;gBAC1D,MAAM,CAAC;YACT,CAAC;YACD,iBAAiB,EAAE,CAAC;QACtB,CAAC;IAPI,CAOJ;IACD,eAAe,EAAE,UACf,EAKC;YAJmB,6CAAY,EACX,8CAAY,EAC/B,oCAAe,EACf,8CAAoB;QAEnB,OAAA,UAAC,CAAuB;YAC3B,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,aAAa;gBAC/C,CAAC,uBAAuB,CAAC,CAAC,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC;YACT,CAAC;YACD,oBAAoB,EAAE,CAAC;QACzB,CAAC;IAPI,CAOJ;CACF,CAAC,CAAC","file":"withTransitionObserver.js","sourcesContent":["import { EventHandler, TransitionEvent } from \"react\";\nimport { withHandlers } from \"reassemble\";\n\nimport { CSSTransitionInnerProps } from \"../csstransition\";\nimport { WithTransitionStateProps } from \"./withTransitionState\";\nimport { WithTransitionInfoProps } from \"./withTransitionInfo\";\nimport matchTransitionProperty from \"../utils/matchTransitionProperty\";\n\nexport type WithTransitionObserverProps = {\n  onTransitionStart: EventHandler<TransitionEvent<any>>,\n};\n\ntype PropsOut = WithTransitionObserverProps & {\n  onTransitionEnd: EventHandler<TransitionEvent<any>>,\n};\n\ntype PropsUnion = CSSTransitionInnerProps\n  & WithTransitionStateProps\n  & WithTransitionInfoProps\n  & PropsOut;\n\nexport const withTransitionObserver =\n  withHandlers<PropsUnion, PropsOut>({\n    onTransitionStart: (\n      {\n        transitionInfo: { firstProperty },\n        transitionState: { inTransition },\n        onTransitionStart,\n        onTransitionBegin,\n      },\n    ) => (e: TransitionEvent<any>) => {\n      if (onTransitionStart) { onTransitionStart(e); }\n      if (!inTransition || e.target !== e.currentTarget ||\n        !matchTransitionProperty(e.propertyName, firstProperty)) {\n        return;\n      }\n      onTransitionBegin();\n    },\n    onTransitionEnd: (\n      {\n        transitionInfo: { lastProperty },\n        transitionState: { inTransition },\n        onTransitionEnd,\n        onTransitionComplete,\n      },\n    ) => (e: TransitionEvent<any>) => {\n      if (onTransitionEnd) { onTransitionEnd(e); }\n      if (!inTransition || e.target !== e.currentTarget ||\n        !matchTransitionProperty(e.propertyName, lastProperty)) {\n        return;\n      }\n      onTransitionComplete();\n    },\n  });\n"]}