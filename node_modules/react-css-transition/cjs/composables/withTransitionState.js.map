{"version":3,"sources":["composables/withTransitionState.tsx"],"names":[],"mappings":"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","file":"withTransitionState.js","sourcesContent":["import { CSSProperties } from \"react\";\nimport {\n  combine, withState, withHandlers, withProps,\n  onDidMount, onWillUnmount, onWillReceiveProps,\n  isolate, integrate, StateUpdater, onDidUpdate,\n} from \"reassemble\";\n\nimport { CSSTransitionProps, CSSTransitionInnerProps } from \"../csstransition\";\nimport runInFrame from \"../utils/runInFrame\";\nimport pick from \"../utils/pick\";\nimport { ActionID, StateID, Reducer, actionPropKeys, ActionPropKeys } from \"../reducer\";\n\nexport type TransitionState = {\n  id?: StateID,\n  style?: CSSProperties,\n  className?: string,\n  inTransition?: boolean,\n};\n\nexport type WithTransitionStateProps = {\n  transitionState?: TransitionState,\n  timeout?: () => void,\n};\n\ntype PropsOut =\n  WithTransitionStateProps & {\n    actionProps?: {[P in ActionPropKeys]?: CSSTransitionProps[P]},\n    cancelPendingIfExistent?: () => void,\n    dispatch?: (actionID: ActionID) => void,\n    runPending?: () => void,\n    setTransitionState?: StateUpdater<TransitionState>,\n    onTransitionBegin?: CSSTransitionInnerProps[\"onTransitionBegin\"],\n    onTransitionComplete?: CSSTransitionInnerProps[\"onTransitionComplete\"],\n  };\n\ntype PropsUnion = CSSTransitionProps & PropsOut;\n\nconst pickTransitionState = (state: any) => pick(state, \"style\", \"className\", \"inTransition\", \"id\");\n\nexport const withTransitionState = (reduce: Reducer) => combine(\n  isolate(\n    withProps<PropsUnion, PropsOut>(\n      (props) => ({ actionProps: pick(props, ...actionPropKeys) }),\n    ),\n    withState<PropsUnion, keyof PropsOut, TransitionState>(\n      \"transitionState\", \"setTransitionState\",\n      ({actionProps}) =>\n        pickTransitionState(\n          reduce(StateID.EntryPoint, { kind: ActionID.New, props: actionProps }).state,\n        ),\n    ),\n    withHandlers<PropsUnion, PropsOut>(\n      (initialProps) => {\n        let stateID = reduce(StateID.EntryPoint, { kind: ActionID.New, props: initialProps }).state.id;\n        let cancelPending: () => void = null;\n        let pendingCallback: () => void;\n        const cancelPendingIfExistent = () => {\n          if (cancelPending) {\n            cancelPending();\n            cancelPending = null;\n          }\n        };\n        return {\n          cancelPendingIfExistent: () => cancelPendingIfExistent,\n          runPending: () => () => {\n            const callback = pendingCallback;\n            pendingCallback = null;\n            if (callback) {\n              callback();\n            }\n          },\n          dispatch: ({actionProps, onTransitionComplete, setTransitionState}) => {\n            const run = (actionID: ActionID) => {\n              const result = reduce(stateID, { kind: actionID, props: actionProps });\n              if (!result) { return; }\n              if (result.completed && onTransitionComplete) {\n                onTransitionComplete();\n              }\n              const {state, pending} = result;\n              stateID = state.id;\n              cancelPendingIfExistent();\n              if (pending) {\n                pendingCallback = () => {\n                  cancelPending = runInFrame(1, () => run(pending));\n                };\n              }\n              setTransitionState(pickTransitionState(state));\n            };\n            return run;\n          },\n        };\n      }),\n    withHandlers<PropsUnion, PropsOut>({\n      onTransitionBegin: ({dispatch}) => () => dispatch(ActionID.TransitionStart),\n      onTransitionComplete: ({dispatch}) => () => dispatch(ActionID.TransitionComplete),\n      timeout: ({dispatch}) => () => dispatch(ActionID.Timeout),\n    }),\n    onDidMount<PropsUnion>(\n      ({dispatch}) => {\n        dispatch(ActionID.Mount);\n      }),\n    onWillReceiveProps<PropsUnion>(\n      ({active: prevActive}, {active: nextActive, dispatch}) => {\n        if (prevActive === nextActive) { return; }\n        dispatch(ActionID.TransitionTrigger);\n      }),\n    onDidUpdate<PropsUnion>(\n      ({runPending}) => {\n        runPending();\n      }),\n    onWillUnmount<PropsUnion>(\n      ({cancelPendingIfExistent}) => {\n        cancelPendingIfExistent();\n      }),\n    integrate<keyof PropsUnion>(\n      \"timeout\", \"transitionState\", \"onTransitionBegin\", \"onTransitionComplete\",\n    ),\n  ),\n);\n"]}