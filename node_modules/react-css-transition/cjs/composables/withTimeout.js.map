{"version":3,"sources":["composables/withTimeout.ts"],"names":[],"mappings":";AAAA,yCAAmG;AAMtF,QAAA,iBAAiB,GAAG,CAAC,CAAC;AAatB,QAAA,WAAW,GACtB,oBAAO,CACL,yBAAY,CACV;IACE,IAAI,SAAc,CAAC;IACnB,MAAM,CAAC;QACL,SAAS,EAAE,UAAC,EAAS;gBAAR,oBAAO;YAAM,OAAA,UAAC,EAAU,IAAK,OAAA,SAAS,GAAG,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,EAAnC,CAAmC;QAAnD,CAAmD;QAC7E,MAAM,EAAE,cAAM,OAAA,cAAM,OAAA,YAAY,CAAC,SAAS,CAAC,EAAvB,CAAuB,EAA7B,CAA6B;KAC5C,CAAC;AACJ,CAAC,CAAC,EACJ,+BAAkB,CAChB,UACE,EAAyC,EACzC,EAGC;QAJkB,8CAAY,EAAG,kBAAM;QAEpB,kDAA8B,EAChD,kBAAM,EAAE,sBAAkB;IAG5B,IAAM,mBAAmB,GAAG,YAAY,KAAK,gBAAgB,CAAC;IAC9D,IAAM,WAAW,GAAG,gBAAgB,IAAI,MAAM,KAAK,UAAU,CAAC;IAC9D,EAAE,CAAC,CAAC,mBAAmB,IAAI,WAAW,CAAC,CAAC,CAAC;QACvC,MAAM,EAAE,CAAC;IACX,CAAC;AACH,CAAC,CAAC,EACJ,wBAAW,CACT,UACE,EAAyC,EACzC,EAIC;QALkB,8CAAY,EAAG,kBAAM;QAEpB,kDAA8B,EAC/B,+CAAa,EAC9B,wBAAS,EAAE,sBAAkB;IAG/B,IAAM,aAAa,GAAG,CAAC,YAAY,IAAI,gBAAgB,CAAC;IACxD,IAAM,WAAW,GAAG,gBAAgB,IAAI,MAAM,KAAK,UAAU,CAAC;IAC9D,EAAE,CAAC,CAAC,aAAa,IAAI,WAAW,CAAC,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,aAAa,GAAG,yBAAiB,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;AACH,CAAC,CAAC,EACJ,0BAAa,CAAa,UAAC,EAAU;QAAR,kBAAM;IAAO,OAAA,MAAM,EAAE;AAAR,CAAQ,CAAC,CACpD,CAAC","file":"withTimeout.js","sourcesContent":["import { withHandlers, isolate, onWillReceiveProps, onDidUpdate, onWillUnmount } from \"reassemble\";\n\nimport { CSSTransitionProps } from \"../csstransition\";\nimport { WithTransitionStateProps } from \"./withTransitionState\";\nimport { WithTransitionInfoProps } from \"./withTransitionInfo\";\n\nexport const timeoutMultiplier = 3;\n\ntype PropsOut = {\n  cancel: () => void,\n  timeoutIn: (ms: number) => void,\n};\n\ntype PropsUnion =\n  CSSTransitionProps\n  & WithTransitionStateProps\n  & WithTransitionInfoProps\n  & PropsOut;\n\nexport const withTimeout =\n  isolate(\n    withHandlers<PropsUnion, PropsOut>(\n      () => {\n        let timeoutID: any;\n        return {\n          timeoutIn: ({timeout}) => (ms: number) => timeoutID = setTimeout(timeout, ms),\n          cancel: () => () => clearTimeout(timeoutID),\n        };\n      }),\n    onWillReceiveProps<PropsUnion>(\n      (\n        {transitionState: {inTransition}, active},\n        {\n          transitionState: {inTransition: nextInTransition},\n          cancel, active: nextActive,\n        },\n      ) => {\n        const inTransitionChanged = inTransition !== nextInTransition;\n        const interrupted = nextInTransition && active !== nextActive;\n        if (inTransitionChanged || interrupted) {\n          cancel();\n        }\n      }),\n    onDidUpdate<PropsUnion>(\n      (\n        {transitionState: {inTransition}, active},\n        {\n          transitionState: {inTransition: nextInTransition},\n          transitionInfo: {totalDuration},\n          timeoutIn, active: nextActive,\n        },\n      ) => {\n        const newTransition = !inTransition && nextInTransition;\n        const interrupted = nextInTransition && active !== nextActive;\n        if (newTransition || interrupted) {\n          if (nextInTransition) {\n            timeoutIn(totalDuration * timeoutMultiplier);\n          }\n        }\n      }),\n    onWillUnmount<PropsUnion>(({ cancel }) => cancel()),\n  );\n"]}