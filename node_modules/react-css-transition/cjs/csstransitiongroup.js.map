{"version":3,"sources":["csstransitiongroup.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+BAGe;AACf,wEAA0E;AAW1E;IAAwC,sCAAsC;IAA9E;QAAA,qEAqBC;QAjBS,aAAO,GAAG,KAAK,CAAC;QACjB,uBAAiB,GAAG,cAAM,OAAA,KAAI,CAAC,OAAO,GAAG,IAAI,EAAnB,CAAmB,CAAC;;IAgBvD,CAAC;IAdQ,mCAAM,GAAb;QAAA,iBAaC;QAZC,IAAM,eAA2D,EAAzD,sCAAgB,EAAE,sBAAQ,EAAE,mDAA6B,CAAC;QAClE,MAAM,CAAC,CACL,oBAAC,eAAe,eAAK,IAAI,GACtB,gBAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAC,KAAwB,EAAE,KAAK;YACtD,OAAA,oBAAC,uBAAuB,IACtB,gBAAgB,EAAE,gBAAgB,EAClC,OAAO,EAAE,KAAI,CAAC,OAAO,EACrB,GAAG,EAAE,KAAK,CAAC,GAAG,IACb,KAAK,CACkB;QAL1B,CAK0B,CAC3B,CACe,CAAC,CAAC;IACxB,CAAC;IACH,yBAAC;AAAD,CArBA,AAqBC,CArBuC,iBAAS;AACjC,+BAAY,GAAQ;IAChC,SAAS,EAAE,KAAK;CACjB,CAAC;AAHS,gDAAkB;AA6B/B;IAA6C,2CAA2D;IAMtG,iCAAY,KAAU;QAAtB,YACE,kBAAM,KAAK,CAAC,SAKb;QA4BO,0BAAoB,GAAG;YAC7B,IAAM,KAAK,GAAG,gBAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC;YAAC,CAAC;YAC7E,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAAC,KAAI,CAAC,SAAS,EAAE,CAAC;YAAC,CAAC;QAC3C,CAAC,CAAA;QApCC,KAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,IAAI;YACZ,gBAAgB,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,gBAAgB;SAC1D,CAAC;;IACJ,CAAC;IAEM,qDAAmB,GAA1B,UAA2B,IAAgB;QACzC,IAAI,EAAE,CAAC;IACT,CAAC;IAEM,oDAAkB,GAAzB,UAA0B,IAAgB;QACxC,6CAA6C;QAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;QACD,IAAI,EAAE,CAAC;IACT,CAAC;IAEM,oDAAkB,GAAzB,UAA0B,IAAgB;QACxC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAEM,wCAAM,GAAb;QACQ,IAAA,SAAsF,EAA5E,4BAAQ,EAAG,aAAkC,EAAzB,kBAAM,EAAE,sCAAgB,EAAG,8CAAoB,CAAU;QAC7F,MAAM,CAAC,oBAAY,CACjB,gBAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EACvB,EAAE,MAAM,QAAA,EAAE,gBAAgB,kBAAA,EAAE,oBAAoB,sBAAA,EAAE,CACnD,CAAC;IACJ,CAAC;IAOH,8BAAC;AAAD,CA7CA,AA6CC,CA7C4C,iBAAS;AACtC,oCAAY,GAAQ;IAChC,gBAAgB,EAAE,KAAK;CACxB,CAAC;AAHS,0DAAuB","file":"csstransitiongroup.js","sourcesContent":["import * as React from \"react\";\nimport {\n  Component, Children, ReactElement, HTMLAttributes,\n  ComponentClass, StatelessComponent, cloneElement,\n} from \"react\";\nimport * as TransitionGroup from \"react-transition-group/TransitionGroup\";\n\nimport { CSSTransitionProps } from \"./csstransition\";\n\nexport interface CSSTransitionGroupProps extends\n  HTMLAttributes<any> {\n  transitionAppear?: boolean;\n  component?: string | ComponentClass<any> | StatelessComponent<any>;\n  children?: ReactElement<CSSTransitionProps> | Array<ReactElement<CSSTransitionProps>>;\n}\n\nexport class CSSTransitionGroup extends Component<CSSTransitionGroupProps, {}> {\n  public static defaultProps: any = {\n    component: \"div\",\n  };\n  private mounted = false;\n  public componentDidMount = () => this.mounted = true;\n\n  public render() {\n    const { transitionAppear, children, ...rest } = this.props as any;\n    return (\n      <TransitionGroup {...rest}>\n        {Children.map(children, (child: ReactElement<any>, index) =>\n          <CSSTransitionGroupChild\n            transitionAppear={transitionAppear}\n            mounted={this.mounted}\n            key={child.key}>\n            {child}\n          </CSSTransitionGroupChild>,\n        )}\n      </TransitionGroup>);\n  }\n}\n\nexport interface CSSTransitionGroupChildProps {\n  transitionAppear?: boolean;\n  mounted?: boolean;\n  children?: ReactElement<any>;\n}\n\nexport class CSSTransitionGroupChild extends Component<CSSTransitionGroupChildProps, CSSTransitionProps> {\n  public static defaultProps: any = {\n    transitionAppear: false,\n  };\n  private leaveDone: () => void;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      active: true,\n      transitionAppear: props.mounted || props.transitionAppear,\n    };\n  }\n\n  public componentWillAppear(done: () => void) {\n    done();\n  }\n\n  public componentWillEnter(done: () => void) {\n    // component was leaving but was interrupted.\n    if (!this.state.active) {\n      this.setState({ active: true });\n      this.leaveDone = null;\n    }\n    done();\n  }\n\n  public componentWillLeave(done: () => void) {\n    this.setState({ active: false });\n    this.leaveDone = done;\n  }\n\n  public render() {\n    const { props: {children}, state: { active, transitionAppear}, onTransitionComplete } = this;\n    return cloneElement(\n      Children.only(children),\n      { active, transitionAppear, onTransitionComplete },\n    );\n  }\n\n  private onTransitionComplete = () => {\n    const child = Children.only(this.props.children);\n    if (child.props.onTransitionComplete) { child.props.onTransitionComplete(); }\n    if (this.leaveDone) { this.leaveDone(); }\n  }\n}\n"]}